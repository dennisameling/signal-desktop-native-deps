name: Build native deps
on:
  workflow_dispatch:
    inputs:
      zkgroup:
        description: 'signal-zkgroup-node (enter the tag you want to build)'
        required: false
        default: ''
      libsignal-client:
        description: 'libsignal-client-node (enter the tag you want to build)'
        required: false
        default: ''
      ringrtc:
        description: 'ringrtc tag to build signal-ringrtc-node (takes 1.5 hours to build!)'
        required: false
        default: ''

defaults:
  run:
    shell: bash

jobs:
  zkgroup:
    if: github.event.inputs.zkgroup != ''

    strategy:
      fail-fast: false
      matrix:
        include:
         - os: windows
           runner: windows-latest
           suffix: dll
           cargo-target: pc-windows-msvc
         - os: macos
           runner: macos-11
           suffix: dylib
           cargo-target: apple-darwin
         - os: ubuntu
           runner: ubuntu-latest
           suffix: so
           cargo-target: unknown-linux-gnu

    runs-on: ${{ matrix.runner }}
    
    steps:
    - uses: actions/checkout@v2
      with:
        repository: signalapp/zkgroup
        ref: ${{ github.event.inputs.zkgroup }}

    - name: Build x64
      working-directory: ffi/node
      run: make libzkgroup CARGO_BUILD_TARGET=x86_64-${{ matrix.cargo-target }} NODE_ARCH=x64

    - name: Build arm64
      working-directory: ffi/node
      run: |
        export CARGO_BUILD_TARGET=aarch64-${{ matrix.cargo-target }}
        rustup target add ${CARGO_BUILD_TARGET}
        if [[ "${{ matrix.os }}" == "ubuntu" ]]; then
          sudo apt-get install -y crossbuild-essential-arm64
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        fi

        make libzkgroup NODE_ARCH=arm64
    
    - name: Build ia32
      working-directory: ffi/node
      if: matrix.os != 'macos'
      run: |
        export CARGO_BUILD_TARGET=i686-${{ matrix.cargo-target }}
        rustup target add ${CARGO_BUILD_TARGET}
        if [[ "${{ matrix.os }}" == "ubuntu" ]]; then
          sudo apt-get install -y crossbuild-essential-i386
          export CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER=i686-linux-gnu-gcc
        fi

        make libzkgroup NODE_ARCH=ia32

    - uses: actions/upload-artifact@v2
      with:
        name: libzkgroup-${{ matrix.os }}
        path: ffi/node/libzkgroup*.${{ matrix.suffix }}

  libsignal-client:
    if: github.event.inputs.libsignal-client != ''

    strategy:
      fail-fast: false
      matrix:
        include:
         - os: windows
           runner: windows-latest
           cargo-target: pc-windows-msvc
         - os: macos
           runner: macos-11
           cargo-target: apple-darwin
         - os: ubuntu
           runner: ubuntu-latest
           cargo-target: unknown-linux-gnu

    runs-on: ${{ matrix.runner }}
      
    steps:
    - uses: actions/checkout@v2
      with:
        repository: signalapp/libsignal-client
        ref: ${{ github.event.inputs.libsignal-client }}
    
    - name: Install latest Rust stable
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal

    - name: Get Node version from .nvmrc
      id: get-nvm-version
      shell: bash
      run: echo "::set-output name=node-version::$(cat .nvmrc)"

    - uses: actions/setup-node@v2
      with:
        node-version: ${{ steps.get-nvm-version.outputs.node-version }}

    - name: Install deps
      run: yarn install --frozen-lockfile

    - name: Build x64
      run: npx prebuildify --napi -t ${{ steps.get-nvm-version.outputs.node-version }} --arch x64

    - name: Build arm64
      run: |
        rustup target add aarch64-${{ matrix.cargo-target }}
        if [[ "${{ matrix.os }}" == "ubuntu" ]]; then
          sudo apt-get install -y crossbuild-essential-arm64
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        fi
        npx prebuildify --napi -t ${{ steps.get-nvm-version.outputs.node-version }} --arch arm64
    
    - name: Build ia32
      if: matrix.os != 'macos'
      run: |
        rustup target add i686-${{ matrix.cargo-target }}
        if [[ "${{ matrix.os }}" == "ubuntu" ]]; then
          sudo apt-get install -y crossbuild-essential-i386
          export CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER=i686-linux-gnu-gcc
        fi
        npx prebuildify --napi -t ${{ steps.get-nvm-version.outputs.node-version }} --arch ia32

    # Need Node v16 for npm pack JSON option
    - uses: actions/setup-node@v2
      with:
        node-version: '16'
        
    - name: Package NodeJS lib
      if: matrix.os == 'ubuntu'
      # This generates a signalapp-signal-client-{VERSION}.tgz file
      # We simply strip out the version so that it's easier to work with later on
      run: |
        yarn tsc
        npm pack --json=true > npm-output.json
        mv signalapp-signal-client-$(jq .[0].version -r npm-output.json).tgz signalapp-signal-client.tgz

    - uses: actions/upload-artifact@v2
      with:
        name: libsignal-client-${{ matrix.os }}-${{ github.event.inputs.libsignal-client }}
        path: prebuilds/*
    
    - uses: actions/upload-artifact@v2
      if: matrix.os == 'ubuntu'
      with:
        name: libsignal-client-node-${{ github.event.inputs.libsignal-client }}
        path: ./signalapp-signal-client.tgz

  libsignal-build:
    needs: [libsignal-client]
    runs-on: ubuntu-latest
    
    steps:
    # Contains the signalapp-signal-client.tgz file with package.json etc.
    - uses: actions/download-artifact@v2
      with:
        name: libsignal-client-node-${{ github.event.inputs.libsignal-client }}

    - run: |
        tar -xvzf signalapp-signal-client.tgz
        mv package/* .
        rm -rf package

    - uses: actions/download-artifact@v2
      with:
        name: libsignal-client-ubuntu-${{ github.event.inputs.libsignal-client }}
        path: prebuilds

    - uses: actions/download-artifact@v2
      with:
        name: libsignal-client-macos-${{ github.event.inputs.libsignal-client }}
        path: prebuilds

    - uses: actions/download-artifact@v2
      with:
        name: libsignal-client-windows-${{ github.event.inputs.libsignal-client }}
        path: prebuilds

    - name: Display structure of downloaded files
      run: ls -R

    ## TODO create PR in dennisameling/libsignal-client-node automatically
    - uses: actions/upload-artifact@v2
      with:
        name: libsignal-client-all-${{ github.event.inputs.libsignal-client }}
        path: ./

  ringrtc-win:
    if: github.event.inputs.ringrtc != ''

    runs-on: windows-latest

    env:
      # Needed to use locally installed Visual Studio version
      DEPOT_TOOLS_WIN_TOOLCHAIN: 0

    steps:
    # We use the C-drive since the default D-drive doesn't have enough space for the massive webrtc dependency
    # https://github.com/actions/virtual-environments/issues/1341#issuecomment-669204383  
    - run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git C:/ringrtc-tmp/depot_tools
        echo "C:/ringrtc-tmp/depot_tools" >> $GITHUB_PATH
        git clone --single-branch --branch ${{ github.event.inputs.ringrtc }} https://github.com/signalapp/ringrtc C:/ringrtc-tmp/ringrtc

    - name: Prepare workspace (takes up to 1 hour!)
      working-directory: C:/ringrtc-tmp/ringrtc
      run: ./bin/prepare-workspace windows

    - name: Build x64
      working-directory: C:/ringrtc-tmp/ringrtc
      run: TARGET_ARCH=x64 ./bin/build-electron -r

    - name: Build arm64
      working-directory: C:/ringrtc-tmp/ringrtc
      run: |
        rustup target add aarch64-pc-windows-msvc
        TARGET_ARCH=arm64 ./bin/build-electron -r
    
    - name: Build ia32
      working-directory: C:/ringrtc-tmp/ringrtc
      run: |
        rustup target add i686-pc-windows-msvc
        TARGET_ARCH=ia32 ./bin/build-electron -r

    - uses: actions/upload-artifact@v2
      with:
        name: ringrtc-windows-${{ github.event.inputs.ringrtc }}
        path: C:/ringrtc-tmp/ringrtc/src/node/build/**/*.node

  ringrtc-mac:
    if: github.event.inputs.ringrtc != ''

    runs-on: macos-11

    steps:
    - uses: actions/checkout@v2
      with:
        repository: signalapp/ringrtc
        ref: ${{ github.event.inputs.ringrtc }}

    - run: brew install coreutils

    - run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git $HOME/depot_tools
        echo "$HOME/depot_tools" >> $GITHUB_PATH

    - name: Prepare workspace (takes up to 1 hour!)
      run: ./bin/prepare-workspace mac

    - name: Build x64
      run: TARGET_ARCH=x64 ./bin/build-electron -r

    - name: Build arm64
      run: |
        rustup target add aarch64-apple-darwin
        TARGET_ARCH=arm64 ./bin/build-electron -r

    - uses: actions/upload-artifact@v2
      with:
        name: ringrtc-mac-${{ github.event.inputs.ringrtc }}
        path: src/node/build/**/*.node

  ringrtc-linux:
    if: github.event.inputs.ringrtc != ''

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        repository: signalapp/ringrtc
        ref: ${{ github.event.inputs.ringrtc }}

    # Since webrtc is such a massive dependency (~20GB), let's free up some disk space first.
    - name: Free up 30GB of disk space (Linux-only)
      run: |
        sudo rm -rf /usr/local/lib/android # will release about 10 GB since we don't need Android
        sudo rm -rf /usr/share/dotnet # will release about 20GB since we don't need .NET
  
    - run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git $HOME/depot_tools
        echo "$HOME/depot_tools" >> $GITHUB_PATH

    - name: Prepare workspace (takes up to 1 hour!)
      run: ./bin/prepare-workspace unix

    - name: Build x64
      run: TARGET_ARCH=x64 ./bin/build-electron -r

    - name: Build arm64
      run: |
        src/webrtc/src/build/linux/sysroot_scripts/install-sysroot.py --arch arm64
        sudo apt-get update
        sudo apt-get install -y crossbuild-essential-arm64
        export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        rustup target add aarch64-unknown-linux-gnu
        TARGET_ARCH=arm64 ./bin/build-electron -r

    - name: Build ia32
      run: |
        sudo apt-get install -y crossbuild-essential-i386
        export CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER=i686-linux-gnu-gcc
        rustup target add i686-unknown-linux-gnu
        TARGET_ARCH=ia32 ./bin/build-electron -r
        
    - uses: actions/setup-node@v2
      with:
        node-version: '14'
        
    - name: Build NodeJS lib
      run: |
        npm i -g yarn
        cd src/node
        yarn
        yarn build
        mkdir ../node-output
        scripts/copy_repo.sh . ../node-output

    - uses: actions/upload-artifact@v2
      with:
        name: ringrtc-linux-${{ github.event.inputs.ringrtc }}
        path: ${{ github.workspace }}/src/node-output

  ringrtc-build:
    needs: [ringrtc-win, ringrtc-mac, ringrtc-linux]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: ringrtc-linux-${{ github.event.inputs.ringrtc }}

    - uses: actions/download-artifact@v2
      with:
        name: ringrtc-mac-${{ github.event.inputs.ringrtc }}
        path: build

    - uses: actions/download-artifact@v2
      with:
        name: ringrtc-windows-${{ github.event.inputs.ringrtc }}
        path: build

    - name: Display structure of downloaded files
      run: ls -R

    ## TODO create PR in dennisameling/signal-ringrtc-node automatically
    - uses: actions/upload-artifact@v2
      with:
        name: signal-ringrtc-node-${{ github.event.inputs.ringrtc }}
        path: ./
