name: Build native deps
on:
  workflow_dispatch:
    inputs:
      zkgroup:
        description: 'signal-zkgroup-node'
        required: false
        default: 'yes'
      libsignal-client:
        description: 'libsignal-client-node'
        required: false
        default: 'yes'
      ringrtc:
        description: 'signal-ringrtc-node'
        required: false
        default: 'no'

env:
  # Needed for macOS arm64 until hosted macos-11.0 runners become available
  SDKROOT: /Library/Developer/CommandLineTools/SDKs/MacOSX11.1.sdk

jobs:
  zkgroup:
    if: ${{ github.event.inputs.zkgroup }} == 'yes'

    strategy:
      matrix:
        include:
         - os: windows
           suffix: dll
           cargo-target: pc-windows-msvc
         - os: macos
           suffix: dylib
           cargo-target: apple-darwin

    runs-on: ${{ matrix.os }}-latest
    
    steps:
    - uses: actions/checkout@v2
      with:
        repository: dennisameling/zkgroup
        ref: node-cross-compilation

    - name: Build x64
      working-directory: ffi/node
      run: make libzkgroup CARGO_BUILD_TARGET=x86_64-${{ matrix.cargo-target }} NODE_ARCH=x64

    - name: Build arm64
      working-directory: ffi/node
      run: |
        rustup target add aarch64-${{ matrix.cargo-target }}
        make libzkgroup CARGO_BUILD_TARGET=aarch64-${{ matrix.cargo-target }} NODE_ARCH=arm64
    
    - name: Build ia32
      working-directory: ffi/node
      if: matrix.os == 'windows'
      run: |
        rustup target add i686-${{ matrix.cargo-target }}
        make libzkgroup CARGO_BUILD_TARGET=i686-${{ matrix.cargo-target }} NODE_ARCH=ia32

    - uses: actions/upload-artifact@v2
      with:
        name: libzkgroup-${{ matrix.os }}
        path: ffi/node/libzkgroup*.${{ matrix.suffix }}

  libsignal-client:
    if: ${{ github.event.inputs.zkgroup }} == 'yes'

    strategy:
      matrix:
        include:
         - os: windows
           cargo-target: pc-windows-msvc
         - os: macos
           cargo-target: apple-darwin

    runs-on: ${{ matrix.os }}-latest
      
    steps:
    - uses: actions/checkout@v2
      with:
        repository: signalapp/libsignal-client
    
    - uses: actions/setup-node@v2
      with:
        node-version: '14'

    - run: npm i -g yarn && yarn && mkdir -p artifacts

    - name: Build x64
      env:
        CARGO_BUILD_TARGET: x86_64-${{ matrix.cargo-target }}
        npm_config_arch: x64
      run: yarn build && cp build/Release/libsignal_client_*.node artifacts

    - name: Build arm64
      run: |
        rustup target add aarch64-${{ matrix.cargo-target }} && yarn build -- --arch=arm64
        cp build/Release/libsignal_client_*.node artifacts
    
    - name: Build ia32
      if: matrix.os == 'windows'
      run: |
        rustup target add i686-${{ matrix.cargo-target }} && yarn build -- --arch=ia32
        cp build/Release/libsignal_client_*.node artifacts

    - uses: actions/upload-artifact@v2
      with:
        name: libsignal-client-${{ matrix.os }}
        path: artifacts/libsignal_client_*.node
